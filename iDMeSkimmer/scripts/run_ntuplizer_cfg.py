import FWCore.ParameterSet.Config as cms
import FWCore.ParameterSet.VarParsing as VarParsing
import FWCore.Utilities.FileUtils as FileUtils

process = cms.Process("USER")
options = VarParsing.VarParsing('analysis')
options.register('data',
        False,
        VarParsing.VarParsing.multiplicity.singleton,
        VarParsing.VarParsing.varType.bool,
        "Run on data (1) or MC (0)"
        )
options.register('numThreads',
        8,
        VarParsing.VarParsing.multiplicity.singleton,
        VarParsing.VarParsing.varType.int,
        "Number of threads (for CRAB vs non-CRAB execution)")
options.register('flist',
        "",
        VarParsing.VarParsing.multiplicity.singleton,
        VarParsing.VarParsing.varType.string,
        "File list to ntuplize")

options.parseArguments()

# reading input file list; if none given just use default file
if options.flist == "":
    options.inputFiles = "root://cmsxrootd.fnal.gov//store/group/lpcmetx/iDMe//Samples/MINIAOD/Mchi-42p0_dMchi-4p0_ctau-10/iDMe_Mchi-42p0_dMchi-4p0_mZDinput-120p0_ctau-0_1jet_icckw1_drjj0_xptj80_xqcut20_slc7_amd64_gcc630_CMSSW_9_3_16_tarball_10380744_MINIAOD_ctau-10_year-2018.root"
else:
    print("reading input file list: "+options.flist)
    options.inputFiles = FileUtils.loadListFromFile(options.flist)

options.maxEvents = -1
options.outputFile = 'test_output.root'

process.load("FWCore.MessageService.MessageLogger_cfi")
process.load('Configuration.StandardSequences.Services_cff')
process.load("Configuration.EventContent.EventContent_cff")
process.load("TrackingTools.TransientTrack.TransientTrackBuilder_cfi")
process.load("Configuration.StandardSequences.GeometryRecoDB_cff")
process.load('Configuration.StandardSequences.MagneticField_38T_cff')
process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')

globaltag = '106X_upgrade2018_realistic_v16_L1v1'
process.GlobalTag.globaltag = globaltag

process.options = cms.untracked.PSet(
    wantSummary = cms.untracked.bool(True),
    numberOfThreads = cms.untracked.uint32(options.numThreads)
    )
process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(options.maxEvents)
    )
process.source = cms.Source("PoolSource",
    fileNames = cms.untracked.vstring(options.inputFiles),
    skipBadFiles = cms.untracked.bool(True)
    )
process.TFileService = cms.Service("TFileService",
    fileName = cms.string(options.outputFile),
    closeFileFast = cms.untracked.bool(True)
    )

## Main iDM analyzer 
## (note: cfi with default options is generated by fillDescriptions when compiling -- not found in python/)
## (the only options specified below after cloning are the non-default ones)
from iDMeAnalysis.iDMeSkimmer.iDMeSkimmer_cfi import iDMeSkimmer

process.ntuples_gbm = iDMeSkimmer.clone(
    isData = cms.bool(options.data)
)

process.commonSequence = cms.Sequence(
    process.ntuples_gbm
    )

process.p = cms.Path(process.commonSequence)