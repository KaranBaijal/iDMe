import FWCore.ParameterSet.Config as cms
import FWCore.ParameterSet.VarParsing as VarParsing
import FWCore.Utilities.FileUtils as FileUtils
from TrackingTools.TrackAssociator.default_cfi import TrackAssociatorParameterBlock
from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
from Configuration.ProcessModifiers.run2_miniAOD_UL_cff import run2_miniAOD_UL
import json

process = cms.Process("USER",Run2_2018,run2_miniAOD_UL)
options = VarParsing.VarParsing('analysis')
options.register('data',
        False,
        VarParsing.VarParsing.multiplicity.singleton,
        VarParsing.VarParsing.varType.bool,
        "Run on data (1) or MC (0)"
        )
options.register('numThreads',
        8,
        VarParsing.VarParsing.multiplicity.singleton,
        VarParsing.VarParsing.varType.int,
        "Number of threads (for CRAB vs non-CRAB execution)")
options.register("nEvents",
	-1,
	VarParsing.VarParsing.multiplicity.singleton,
        VarParsing.VarParsing.varType.int,
	"Number of events to process (defaults to all)")
options.register('flist',
        "",
        VarParsing.VarParsing.multiplicity.singleton,
        VarParsing.VarParsing.varType.string,
        "File list to ntuplize")
options.register('outfile',
        "test_output.root",
        VarParsing.VarParsing.multiplicity.singleton,
        VarParsing.VarParsing.varType.string,
        "Output file name")

options.parseArguments()

# reading input file list if given
if options.flist != "":
    if ".txt" in options.flist:
        # list of files
        print("reading input file list: "+options.flist)
        options.inputFiles = FileUtils.loadListFromFile(options.flist)
    else:
        # we have passed a file name directly
        options.inputFiles = options.flist 

process.load("FWCore.MessageService.MessageLogger_cfi")
process.load('Configuration.StandardSequences.Services_cff')
process.load("Configuration.EventContent.EventContent_cff")
process.load("TrackingTools.TransientTrack.TransientTrackBuilder_cfi")
process.load("Configuration.StandardSequences.GeometryRecoDB_cff")
process.load('Configuration.StandardSequences.MagneticField_38T_cff')
process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')

globaltag = '106X_upgrade2018_realistic_v16_L1v1'
process.GlobalTag.globaltag = globaltag

process.options = cms.untracked.PSet(
    wantSummary = cms.untracked.bool(True),
    numberOfThreads = cms.untracked.uint32(options.numThreads)
    )
process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(options.nEvents)
    )
process.source = cms.Source("PoolSource",
    fileNames = cms.untracked.vstring(options.inputFiles),
    skipBadFiles = cms.untracked.bool(True)
    )
process.TFileService = cms.Service("TFileService",
    fileName = cms.string(options.outfile),
    closeFileFast = cms.untracked.bool(True)
    )

## Main iDM analyzer 
## (note: cfi with default options is generated by fillDescriptions when compiling -- not found in python/)
## (the only options specified below after cloning are the non-default ones)
from iDMeAnalysis.AODSkimmer.AODSkimmer_cfi import AODSkimmer
# setting up skimer & process path
process.ntuples = AODSkimmer.clone(
    isData = cms.bool(options.data)
)
process.commonSequence = cms.Sequence(
    process.ntuples
)
process.commonPath = cms.Path(process.commonSequence)
process.schedule = cms.Schedule(process.commonPath)
# Running the PAT producers (from PhysicsTools/PatAlgos/test/patMiniAOD_standard_cfg.py)
process.load("Configuration.StandardSequences.PATMC_cff")
process.schedule.associate(process.patTask) # add the PAT algos
from PhysicsTools.PatAlgos.tools.helpers import associatePatAlgosToolsTask
associatePatAlgosToolsTask(process)
from PhysicsTools.PatAlgos.slimming.miniAOD_tools import miniAOD_customizeAllMC 
process = miniAOD_customizeAllMC(process)